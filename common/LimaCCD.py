#       "$Name:  $";
#       "$Header:  $";
#=============================================================================
#
# file :        LimaCCDs.py
#
# description : Python source for the LimaCCDs and its commands. 
#                The class is derived from Device. It represents the
#                CORBA servant object which will be accessed from the
#                network. All commands which can be executed on the
#         LimaCCDs are implemented in this file.
#
# project :    TANGO Device Server
#
# $Author:  $
#
# $Revision:  $
#
# $Log:     $
#
# copyleft :    European Synchrotron Radiation Facility
#        BP 220, Grenoble 38043
#        FRANCE
#
#=============================================================================
#        This file is generated by seb
#
#      (c) - BLISS - ESRF
#=============================================================================
#

import sys
import PyTango

import lima
import processlib

#Commun Devices
from RoiCounter import RoiCounterDeviceServerClass,RoiCounterDeviceServer

lima.DebParams.setTypeFlags(0)

DevCcdBase			= 0xc180000

# CCD States
DevCcdReady			= DevCcdBase + 1
DevCcdAcquiring			= DevCcdBase + 2
DevCcdFault			= DevCcdBase + 3
DevCcdSaving			= DevCcdBase + 4
DevCcdNotYetInitialised		= DevCcdBase + 5
DevCcdInitializing		= DevCcdBase + 6
DevCcdReadout			= DevCcdBase + 7
DevCcdCorrecting		= DevCcdBase + 8
DevCcdBusy			= DevCcdBase + 9
DevCcdAborting			= DevCcdBase + 10
DevCcdNoRemote			= DevCcdBase + 11

# CCD Errors
DevErrCcdState			= DevCcdBase + 1
DevErrCcdController		= DevCcdBase + 2
DevErrCcdNotEnoughDisk		= DevCcdBase + 3
DevErrCcdNoDirPermission	= DevCcdBase + 4
DevErrCcdNoDirectory		= DevCcdBase + 5
DevErrCcdLongPath		= DevCcdBase + 6
DevErrCcdEmptyPath		= DevCcdBase + 7
DevErrCcdNotAccessible		= DevCcdBase + 8
DevErrCcdNoFilePermission	= DevCcdBase + 9
DevErrCcdFileExist		= DevCcdBase + 10
DevErrCcdCmdNotProc		= DevCcdBase + 11
DevErrCcdCameraModel		= DevCcdBase + 12
DevErrCcdProcessImage		= DevCcdBase + 13
DevErrCcdCameraNotActiveYet	= DevCcdBase + 14

#Small Hack
class _Wrapped:
    def __init__(self,class_type,ctrl) :
        self.__class_type = class_type
        self.__ctrl = weakref.ref(ctrl)
        
    def __call__(self,*args) :
        inst = self.__class_type(*args)
        if hasattr(inst,'set_control_ref') :
            inst.set_control_class(self.__ctrl)
        return inst

#==================================================================
#   LimaCCDs Class Description:
#
#      This is a device server for the LimaCCDs cameras
#      and implementing the Taco ccd interface
#      for integrating it on the beamline.
#
#==================================================================
#    Device States Description:
#
#   DevState.ON :     ccd is ON, taking pictures
#   DevState.OFF :    ccd is OFF, ready to take pictures
#   DevState.FAULT :  ccd is in FAULT, cannot take pictures
#==================================================================

class LimaCCDs(PyTango.Device_3Impl):

#--------- Add you global variables here --------------------------
    RUNNING,IDLE,WRITE_ERROR = range(3)
    
#------------------------------------------------------------------
#    Device constructor
#------------------------------------------------------------------
    def __init__(self,cl, name):
        PyTango.Device_3Impl.__init__(self,cl,name)
        LimaCCDs.init_device(self)
        self.__lima_control = None
        self.__bpm_mgr  = processlib.Tasks.BpmManager()
        self.__bpm_task = processlib.Tasks.BpmTask(self.__bpm_mgr)
        
#------------------------------------------------------------------
#    Device destructor
#------------------------------------------------------------------
    def delete_device(self):
        try:
            m = __import__('plugins.%s' % (self.LimaCameraType),None,None,'plugins.%s' % (self.LimaCameraType))
        except ImportError:
            pass
        else:
            m.close_interface()

#------------------------------------------------------------------
#    Device initialization
#------------------------------------------------------------------
    def init_device(self):
        self.set_state(PyTango.DevState.ON)
        self.get_device_properties(self.get_device_class())
        try:
            m = __import__('plugins.%s' % (self.LimaCameraType),None,None,'plugins.%s' % (self.LimaCameraType))
        except ImportError:
            import traceback
            traceback.print_exc()
            self.set_state(PyTango.DevState.FAULT)
        else:
            self.__control = m.get_control()
            try:
                specificClass,specificDevice = m.get_tango_specific_class_n_device()
            except AttributeError: pass
            else:
                util = PyTango.Util.instance()
                if specificClass and specificDevice:
                    util.create_device(specificClass,specificDevice)

                #Default Devices
                #RoiCounter
                util.create_device(RoiCounterDeviceServerClass,
                                   _Wrapped(RoiCounterDeviceServer,self.__control),
                                   'RoiCounters')

#==================================================================
#
#    LimaCCDs read/write attribute methods
#
#==================================================================
#------------------------------------------------------------------
#    Read Attribute Hardware
#------------------------------------------------------------------
    def read_attr_hardware(self,data):
        pass


#==================================================================
#
#    LimaCCDs command methods
#
#==================================================================

#------------------------------------------------------------------
#    TacoState command:
#
#    Description: 
#    argout: DevLong taco state
#------------------------------------------------------------------
    def TacoState(self):
        state = self.State()
        if state == PyTango.DevState.OFF:
            return DevCcdReady
        elif state == PyTango.DevState.ON:
            return DevCcdAcquiring
        else:
            return DevCcdFault

#------------------------------------------------------------------
#    State command:
#
#    Description: 
#    argout: DevLong taco state
#------------------------------------------------------------------
    def State(self):
        state = self.__control.getStatus()
        if state.AcquisitionStatus == lima.AcqReady:
            return PyTango.DevState.OFF
        elif state.AcquisitionStatus == lima.AcqRunning:
            return PyTango.DevState.ON
        else:
            return PyTango.DevState.FAULT

#------------------------------------------------------------------
#    DevCcdStart command:
#
#    Description: 
#------------------------------------------------------------------
    def DevCcdStart(self):
        print 'DevCcdStart'
        self.__control.prepareAcq()
        self.__control.startAcq()


#------------------------------------------------------------------
#    DevCcdStop command:
#
#    Description: 
#------------------------------------------------------------------
    def DevCcdStop(self):
        print 'DevCcdStop'
        self.__control.stopAcq()

#------------------------------------------------------------------
#    DevCcdRead command:
#
#    Description: 
#    argin:    DevVarLongArray 
#    argout: DevVarCharArray 
#------------------------------------------------------------------
    def DevCcdRead(self, argin):
        data = self.__control.ReadImage(argin[0])
        return data.buffer.tostring()

#------------------------------------------------------------------
#    DevCcdReadJpeg command:
#
#    Description: 
#    argin:    DevShort    jpeg compression
#    argout: DevVarCharArray jpeg compressed image
#------------------------------------------------------------------
    def DevCcdReadJpeg(self, argin):
        pass

#------------------------------------------------------------------
#    DevCcdWrite command:
#
#    Description: 
#------------------------------------------------------------------
    def DevCcdWrite(self):
        pass

#------------------------------------------------------------------
#    DevCcdSetExposure command:
#
#    Description: 
#    argin:    DevFloat    
#------------------------------------------------------------------
    def DevCcdSetExposure(self, argin):
        acq = self.__control.acquisition()
        acq.setAcqExpoTime(argin)

#------------------------------------------------------------------
#    DevCcdGetExposure command:
#
#    Description: read ccd exposure
#         
#    argout: DevFloat    
#------------------------------------------------------------------
    def DevCcdGetExposure(self):
        acq = self.__control.acquisition()
        return acq.getAcqExpoTime()

#------------------------------------------------------------------
#    DevCcdSetRoI command:
#
#    Description: 
#    argin:    DevVarLongArray 
#------------------------------------------------------------------
    def DevCcdSetRoI(self, argin):
        roi = lima.Roi(lima.Point(argin[0], argin[1]), lima.Point(argin[2], argin[3]))
        image = self.__control.image()
        if roi == self.getMaxRoi() :
            roi = lima.Roi()
        image.setRoi(roi)
#------------------------------------------------------------------
#    DevCcdGetRoI command:
#
#    Description: get the region of interest coordinates
#         
#    argout: DevVarLongArray region of interest
#------------------------------------------------------------------
    def DevCcdGetRoI(self):
        image = self.__control.image()
        roi = image.getRoi()
        if roi.isEmpty():
            roi = self.getMaxRoi()

        tl = roi.getTopLeft()
        br = roi.getBottomRight()
        return [tl.x, tl.y, br.x, br.y]
    
    def getMaxRoi(self):
        ct_image = self.__control.image()
        max_roi_size = ct_image.getMaxImageSize()
        max_roi_size /= lima.Point(ct_image.getBin())
        max_roi = lima.Roi(lima.Point(0,0),max_roi_size)
        return max_roi

#------------------------------------------------------------------
#    DevCcdSetFilePar command:
#
#    Description: 
#    argin:    DevVarStringArray    
#------------------------------------------------------------------
    def DevCcdSetFilePar(self, argin):
        saving  = self.__control.saving()
        pars = saving.getParameters()
        pars.directory = argin[0]
        pars.prefix = argin[1]
        pars.suffix = argin[2]
        pars.nextNumber = int(argin[3])
        pars.indexFormat = argin[4]
        if argin[5] in ['y', 'yes'] :
            pars.overwritePolicy = saving.Overwrite
        else:
            pars.overwritePolicy = saving.Abort

        if pars.suffix.lower()[-4:] == '.edf':
            pars.fileFormat = saving.EDF
        else:
            pars.fileFormat = saving.RAW

        saving.setParameters(pars)

#------------------------------------------------------------------
#    DevCcdGetFilePar command:
#
#    Description: 
#    argout: DevVarStringArray    
#------------------------------------------------------------------
    def DevCcdGetFilePar(self):
        saving = self.__control.saving()
        pars = saving.getParameters()
        returnValue  = [pars.directory,pars.prefix,pars.suffix,
                        str(pars.nextNumber),
                        pars.indexFormat,
                        (pars.overwritePolicy == saving.Overwrite) and 'yes' or 'no']
        return returnValue

#------------------------------------------------------------------
#    DevCcdDepth command:
#
#    Description: read depth of image in bits
#         
#    argout: DevLong 
#------------------------------------------------------------------
    def DevCcdDepth(self):
        interface = self.__control.interface()
        det_info = interface.getHwCtrlObj(lima.HwCap.DetInfo)
        image_type = det_info.getCurrImageType()
        return lima.FrameDim.getImageTypeDepth(image_type)

#------------------------------------------------------------------
#    DevCcdYSize command:
#
#    Description: get ccd y dimension in pixels
#         
#    argout: DevLong 
#------------------------------------------------------------------
    def DevCcdYSize(self):
        frame_dim = self.__getFrameDim()
        size = frame_dim.getSize()
        return size.getHeight()
        

#------------------------------------------------------------------
#    DevCcdXSize command:
#
#    Description: get ccd image x dimension in pixels
#         
#    argout: DevLong 
#------------------------------------------------------------------
    def DevCcdXSize(self):
        frame_dim = self.__getFrameDim()
        size = frame_dim.getSize()
        return size.getWidth()

#------------------------------------------------------------------
#    DevCcdReset command:
#
#    Description: reset ccd
#         
#------------------------------------------------------------------
    def DevCcdReset(self):
        self.__control.reset()
        
#------------------------------------------------------------------
#    DevCcdSetMode command:
#
#    Description: 
#    argin:    DevLong mode
#------------------------------------------------------------------
    def DevCcdSetMode(self, argin):
        print 'DevCcdSetMode',argin
        live_display = (argin & 0x1)
        display = self.__control.display()
        display.setActive(live_display)

        auto_save = (argin & 0x8)
        savingCtrl = self.__control.saving()
        savingCtrl.setSavingMode(auto_save and lima.CtSaving.AutoFrame or lima.CtSaving.Manual)


#------------------------------------------------------------------
#    DevCcdGetMode command:
#
#    Description: 
#    argout: DevLong 
#------------------------------------------------------------------
    def DevCcdGetMode(self):
        display = self.__control.display()
        mode = display.isActive()

        saving = self.__control.saving()
        mode |= (saving.getSavingMode() == lima.CtSaving.AutoFrame) << 3
        return mode


#------------------------------------------------------------------
#    DevCcdWriteFile command:
#
#    Description: 
#    argin:    DevLong frame to write
#------------------------------------------------------------------
    def DevCcdWriteFile(self, argin):
        print 'DevCcdWriteFile',argin
        

#------------------------------------------------------------------
#    DevCcdGetBin command:
#
#    Description: 
#    argout: DevVarLongArray 
#------------------------------------------------------------------
    def DevCcdGetBin(self):
        image = self.__control.image()
        bin = image.getBin()
        return [bin.getX(),bin.getY()]

#------------------------------------------------------------------
#    DevCcdSetBin command:
#
#    Description: 
#    argin:    DevVarLongArray 
#------------------------------------------------------------------
    def DevCcdSetBin(self, argin):
        bin = lima.Bin(argin[1],argin[0])
        image = self.__control.image()
        image.setBin(bin)

#------------------------------------------------------------------
#    DevCcdSetFrames command:
#
#    Description: 
#    argin:    DevLong 
#------------------------------------------------------------------
    def DevCcdSetFrames(self, argin):
        acquisition = self.__control.acquisition()
        acquisition.setAcqNbFrames(argin)
        
#------------------------------------------------------------------
#    DevCcdGetFrames command:
#
#    Description: 
#    argout: DevLong 
#------------------------------------------------------------------
    def DevCcdGetFrames(self):
        acquisition = self.__control.acquisition()
        return acquisition.getAcqNbFrames()

#------------------------------------------------------------------
#    DevCcdSetTrigger command:
#
#    Description: 
#    argin:    DevLong 
#------------------------------------------------------------------
    def DevCcdSetTrigger(self, argin):
        acquisition = self.__control.acquisition()

        triggerMode = None
        if argin == 0:
            triggerMode = lima.IntTrig
        elif argin == 1:
            exp_time = acquisition.getAcqExpoTime()
            triggerMode = (exp_time == 0) and lima.ExtGate or lima.ExtTrigSingle
        elif argin == 2:
            triggerMode = lima.ExtTrigMult
        else:
            raise lima.Exception,'Invalid ext. trig: %s' % argin

        acquisition.setTriggerMode(triggerMode)
        
#------------------------------------------------------------------
#    DevCcdGetTrigger command:
#
#    Description: 
#    argin:    DevLong 
#------------------------------------------------------------------
    def DevCcdGetTrigger(self,argin) :
        acquisition = self.__control.acquisition()
        triggerMode = acquisition.getTriggerMode()
        if triggerMode == lima.IntTrig:
            returnValue = 0
        elif triggerMode == lima.ExtTrigSingle or triggerMode == lima.ExtGate:
            returnValue = 1
        elif triggerMode == lima.ExtTrigMult:
            returnValue = 2
        else:
            raise lima.Exception, 'Invalid trigger mode: %s' % triggerMode
        return returnValue
#------------------------------------------------------------------
#    DevCcdHeader command:
#
#    Description: 
#    argin:    DevLong 
#------------------------------------------------------------------
    def DevCcdHeader(self, argin):
        header_map = {}
        for key,value in [x.split('=') for x in argin.split('\n')] :
            key = key.strip()
            value = value.strip(' \t;')
            if not key: continue
            header_map[key] = value
        saving = self.__control.saving()
        saving.setCommonHeader(header_map)

#------------------------------------------------------------------
#    DevReadValues command:
#
#    Description: 
#    argout: DevVarDoubleArray    
#------------------------------------------------------------------
    def DevReadValues(self):
        img_data = self.__control.ReadImage(-1)
        self.__bpm_task.process(img_data)
        bpm_pars = self.__bpm_mgr.getResult(1)
        if bpm_pars.errorCode != self.__bpm_mgr.OK:
            raise lima.Exception,'Error calculating beam params: %d' % bpm_pars.errorCode

        nr_spots = 1
        auto_cal = -1
        exp_time = self.DevCcdGetExposure()
        if exp_time > 0:
            norm_intensity = bpm_pars.beam_intensity / exp_time
        else:
            norm_intensity = 0
        return [nr_spots,
                bpm_pars.beam_intensity,
                bpm_pars.beam_center_x,
                bpm_pars.beam_center_y,
                bpm_pars.beam_fwhm_x,
                bpm_pars.beam_fwhm_y,
                bpm_pars.AOI_max_x - bpm_pars.AOI_min_x,
                bpm_pars.AOI_max_y - bpm_pars.AOI_min_y,
                bpm_pars.max_pixel_value,
                bpm_pars.max_pixel_x,
                bpm_pars.max_pixel_y,
                bpm_pars.AOI_min_x,
                bpm_pars.AOI_min_y,
                bpm_pars.AOI_max_x,
                bpm_pars.AOI_max_y,
                bpm_pars.beam_center_x - bpm_pars.beam_fwhm_x / 2,
                bpm_pars.beam_center_y - bpm_pars.beam_fwhm_y / 2,
                bpm_pars.beam_center_x + bpm_pars.beam_fwhm_x / 2,
                bpm_pars.beam_center_y + bpm_pars.beam_fwhm_y / 2,
                norm_intensity,
                auto_cal]

#------------------------------------------------------------------
#    DevReadSigValues command:
#
#    Description: 
#    argout: DevVarDoubleArray    
#------------------------------------------------------------------
    def DevReadSigValues(self):
        exp_time = self.DevCcdGetExposure()
        threshold = 0
        calib_intensity = -1
        image = self.__control.image()
        max_dim = image.getMaxImageSize()
        roi = self.DevCcdGetRoI()
        is_live = -1
        ccd_params = [exp_time,
                      threshold,
                      calib_intensity,
                      max_dim.getWidth(),
                      max_dim.getHeight(),
                      roi[0], roi[1], roi[2], roi[3],
                      is_live]
        ccd_params += self.DevReadValues()
        return ccd_params

#------------------------------------------------------------------
#    DevCcdGetLstErrMsg command:
#
#    Description: Get the last error message is mapped to the status of the Tango ccd device
#         
#    argout: DevString    
#------------------------------------------------------------------
    def DevCcdGetLstErrMsg(self):
        return ''                       # not managed yet!

    def __getFrameDim(self) :
        interface = self.__control.interface()
        bufferCtrl = interface.getHwCtrlObj(lima.HwCap.Buffer)
        frame_dim = bufferCtrl.getFrameDim()
        return frame_dim
#==================================================================
#
#    LimaCCDsClass class definition
#
#==================================================================
class LimaCCDsClass(PyTango.DeviceClass):

    #    Class Properties
    class_property_list = {
        }


    #    Device Properties
    device_property_list = {
        'Ccd_device':
            [PyTango.DevString,
            "name of tango ccd device",
            [] ],
        'Bpm_device':
            [PyTango.DevString,
            "Name of the bpm device to read the beam parameters from.",
            [] ],
        'LimaCameraType' :
        [PyTango.DevString,
         "Camera Plugin name",[]],
        }


    #    Command definitions
    cmd_list = {
        'TacoState':
            [[PyTango.DevVoid, ""],
            [PyTango.DevLong, "taco state"]],
        'DevCcdStart':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""]],
        'DevCcdStop':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""]],
        'DevCcdRead':
            [[PyTango.DevVarLongArray, ""],
            [PyTango.DevVarCharArray, ""]],
        'DevCcdReadJpeg':
            [[PyTango.DevShort, "jpeg compression"],
            [PyTango.DevVarCharArray, "jpeg compressed image"]],
        'DevCcdWrite':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""]],
        'DevCcdSetExposure':
            [[PyTango.DevFloat, ""],
            [PyTango.DevVoid, ""]],
        'DevCcdGetExposure':
            [[PyTango.DevVoid, ""],
            [PyTango.DevFloat, ""]],
        'DevCcdSetRoI':
            [[PyTango.DevVarLongArray, ""],
            [PyTango.DevVoid, ""]],
        'DevCcdSetFilePar':
            [[PyTango.DevVarStringArray, ""],
            [PyTango.DevVoid, ""]],
        'DevCcdGetFilePar':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVarStringArray, ""]],
        'DevCcdDepth':
            [[PyTango.DevVoid, ""],
            [PyTango.DevLong, ""]],
        'DevCcdYSize':
            [[PyTango.DevVoid, ""],
            [PyTango.DevLong, ""]],
        'DevCcdXSize':
            [[PyTango.DevVoid, ""],
            [PyTango.DevLong, ""]],
        'DevCcdReset':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVoid, ""]],
        'DevCcdSetMode':
            [[PyTango.DevLong, "mode"],
            [PyTango.DevVoid, ""]],
        'DevCcdGetMode':
            [[PyTango.DevVoid, ""],
            [PyTango.DevLong, ""]],
        'DevCcdWriteFile':
            [[PyTango.DevLong, "frame to write"],
            [PyTango.DevVoid, ""]],
        'DevCcdGetBin':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVarLongArray, ""]],
        'DevCcdSetBin':
            [[PyTango.DevVarLongArray, ""],
            [PyTango.DevVoid, ""]],
        'DevCcdSetFrames':
            [[PyTango.DevLong, ""],
            [PyTango.DevVoid, ""]],
        'DevCcdGetFrames':
            [[PyTango.DevVoid, ""],
            [PyTango.DevLong, ""]],
        'DevCcdSetTrigger':
            [[PyTango.DevLong, ""],
            [PyTango.DevVoid, ""]],
        'DevCcdHeader':
            [[PyTango.DevString, ""],
            [PyTango.DevVoid, ""]],
        'DevCcdGetRoI':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVarLongArray, "region of interest"]],
        'DevReadValues':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVarDoubleArray, ""]],
        'DevReadSigValues':
            [[PyTango.DevVoid, ""],
            [PyTango.DevVarDoubleArray, ""]],
        'DevCcdGetLstErrMsg':
            [[PyTango.DevVoid, ""],
            [PyTango.DevString, ""]],
        }


    #    Attribute definitions
    attr_list = {
        }


#------------------------------------------------------------------
#    LimaCCDsClass Constructor
#------------------------------------------------------------------
    def __init__(self, name):
        PyTango.DeviceClass.__init__(self, name)
        self.set_type(name);
        print "In LimaCCDsClass     constructor"

    
#==================================================================
#
#    LimaCCDs class main method
#
#==================================================================
if __name__ == '__main__':
    try:
        py = PyTango.Util(sys.argv)
        py.add_TgClass(LimaCCDsClass,LimaCCDs,'LimaCCDs')
        U = PyTango.Util.instance()
        U.server_init()
        U.server_run()

    except PyTango.DevFailed,e:
        print '-------> Received a DevFailed exception:',e
    except Exception,e:
        print '-------> An unforeseen exception occured....',e
