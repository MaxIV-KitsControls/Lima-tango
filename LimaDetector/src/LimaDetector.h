//=============================================================================
//
// file :        LimaDetector.h
//
// description : Include for the LimaDetector class.
//
// project :	
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source:  $
// $Log:  $
//
// copyleft :    Synchrotron SOLEIL 
//               L'Orme des merisiers - Saint Aubin
//		 BP48 - 91192 Gif sur Yvette
//               FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================
#ifndef _LimaDetector_H
#define _LimaDetector_H

#include <tango.h>

#include <yat4tango/InnerAppender.h>
#include <yat4tango/DynamicAttributeManager.h>

#include <boost/smart_ptr.hpp>
#include <algorithm>
#include <string>
#include <iostream>
#include <yat/memory/SharedPtr.h>

#include "Debug.h"
#include "HwInterface.h"
#include "CtControl.h"
#include "CtAcquisition.h"
#include "CtAccumulation.h"
#include "CtSaving.h"
#include "CtImage.h"
#include "CtBuffer.h"
#include "AcqState.h"

#include "AcquisitionTask.h"
#include "Factory.h"
#include <base.h>

using namespace lima;
using namespace std;
using namespace yat4tango;

/**
 * @author	$Author:  $
 * @version	$Revision:  $
 */

 //	Add your own constant definitions here.
 //-----------------------------------------------


namespace LimaDetector_ns
{

class ImageStatusCallback : public CtControl::ImageStatusCallback
{

public:
	//-ctor
	ImageStatusCallback(CtControl& m_ct) : m_ct_(m_ct)
	{
		m_nb_frames_ 	= 0;
		image_number_ 	= 0;
		lastImage_.reset(new Data);
	}

	//-dtor
	virtual ~ImageStatusCallback()
	{
		
	};

	//-return the last acquired image
	boost::shared_ptr<Data> get_last_image()
	{
		boost::shared_ptr<Data> mydata;
		{
			yat::MutexLock scoped_lock(data_lock_);
			mydata = lastImage_;
		}		
		return mydata;
	}

	//-return current image index
	int get_image_number()
	{
		{
			yat::MutexLock scoped_lock(data_lock_);		
			return image_number_;
		}
	}

	//-reset current image index
	void reset_image_number()
	{
		{
			yat::MutexLock scoped_lock(data_lock_);		
			image_number_ = 0;
		}
	}

protected:
	//-event raised when image status is changed (Exposure/Readout, ..)
	virtual void imageStatusChanged(const CtControl::ImageStatus& img_status)
	{
		{
			yat::MutexLock scoped_lock(data_lock_);
			
			int last_acq_frame_nb = img_status.LastImageAcquired;
			int last_saved_frame_nb = img_status.LastImageSaved;
			
			//- Get the number of requested Frames . Do it once time  !
			if (last_acq_frame_nb == 0)
			{
				CtAcquisition *ct_acq = m_ct_.acquisition();
				ct_acq->getAcqNbFrames(m_nb_frames_);
			}

			//- when the acquisition is completed, it is possible that the camera state goes through several similare states (EXPOSURE/READOUT/...)
			//- here we ensure that code below is executed once !
			if(image_number_ != (last_acq_frame_nb + 1))
			{
				image_number_ = last_acq_frame_nb + 1;
				cout<<"[Image is acquired] -> "<<image_number_<<endl;				
	
				m_ct_.ReadImage(*lastImage_);
				
				//- in "snap" mode, get more informations about acquisition (FOR DEBUG)
				if ((last_acq_frame_nb == m_nb_frames_ - 1) )
				{
					cout << "All frames acquired!"<<endl;
					//...
				}
			}

			//- in "live"/"video" mode,  m_nb_frames_ is always "0" ! nothing else To do, GO OUT.
			if(m_nb_frames_== 0)
				return ;

			//- in "snap" mode, get more informations about saving (FOR DEBUG)
			if (last_saved_frame_nb == m_nb_frames_ - 1)
			{
				cout << "All frames saved!"<<endl;
				//...
			}
		}
	}

private:
	//- Mutex
	yat::Mutex data_lock_;
	//- ctControl object of lima
	CtControl& m_ct_;
	//- requested number of images to acquire
	int m_nb_frames_;
	//- the last acquired image number
	int image_number_;
	//- the last acquired image Data object, containing the buffer of image
	boost::shared_ptr<Data> lastImage_;
};


/**
 * Class Description:
 * Generic device intented to manage Detector via Lima Framework
 */

/*
 *	Device States Description:
*  Tango::INIT :
*  Tango::STANDBY :
*  Tango::FAULT :
*  Tango::RUNNING :
 */


class LimaDetector: public Tango::Device_4Impl
{
public :
	//	Add your own data members here
	//-----------------------------------------


	//	Here is the Start of the automatic code generation part
	//-------------------------------------------------------------	
/**
 *	@name attributes
 *	Attribute member data.
 */
//@{
		Tango::DevString	*attr_detectorDescription_read;
		Tango::DevString	*attr_detectorType_read;
		Tango::DevString	*attr_detectorModel_read;
		Tango::DevUShort	*attr_sensorWidth_read;
		Tango::DevUShort	*attr_sensorHeight_read;
		Tango::DevUShort	*attr_depth_read;
		Tango::DevString	*attr_triggerMode_read;
		Tango::DevString	attr_triggerMode_write;
		Tango::DevString	*attr_acquisitionMode_read;
		Tango::DevString	attr_acquisitionMode_write;
		Tango::DevDouble	*attr_exposureTime_read;
		Tango::DevDouble	attr_exposureTime_write;
		Tango::DevDouble	*attr_exposureAccTime_read;
		Tango::DevDouble	attr_exposureAccTime_write;
		Tango::DevLong	*attr_nbFrames_read;
		Tango::DevLong	attr_nbFrames_write;
		Tango::DevULong	*attr_currentFrame_read;
		Tango::DevBoolean	*attr_fileGeneration_read;
		Tango::DevBoolean	attr_fileGeneration_write;
//@}

/**
 * @name Device properties
 * Device properties member data.
 */
//@{
/**
 *	A simple user free text intented to identify the Detector.
 */
	string	detectorDescription;
/**
 *	Ip Address of the Detector if necessary, NA otherwise.
 */
	string	detectorIP;
/**
 *	Socket Port of the Detector if necessary, NA otherwise.
 */
	Tango::DevLong	detectorPort;
/**
 *	Define the type of the connected Detector .<BR>
 *	Availables types :<BR>
 *	BaslerCCD<BR>
 *	SimulatorCCD<BR>
 *	XpadPixelDetector<BR>
 *	PilatusPixelDetector<BR>
 *	
 *	
 */
	string	detectorType;
/**
 *	Define the pixel depth of the detecor (8, 16, 32).
 */
	Tango::DevUShort	detectorPixelFormat;
/**
 *	Define the format of image files :<BR>
 *	- EDF<BR>
 *	- NXS<BR>
 *	- RAW<BR>
 *	
 */
	string	fileFormat;
/**
 *	Define the prefix used for the image files name.
 */
	string	filePrefix;
/**
 *	Define the format of the index used for image files names.
 */
	string	fileIndexFormat;
/**
 *	Define the number of frames per file.
 */
	Tango::DevShort	fileNbFrames;
/**
 *	Define the root path for temporary generated files.
 */
	string	fileTemporaryPath;
/**
 *	Define the Path where Files will be generated, only when savingFile is checked.
 *	
 *	
 */
	string	fileTargetPath;
/**
 *	Define Lima Modules for which we need some traces in the console.<BR>
 *	Availables values :<BR>
 *	None<BR>
 *	Hardware<BR>
 *	Control<BR>
 *	Common<BR>
 *	Camera<BR>
 */
	vector<string>	debugModules;
/**
 *	Define Lima verbose level of traces in the console.<BR>
 *	Availables values :<BR>
 *	Fatal<BR>
 *	Error<BR>
 *	Warning<BR>
 *	Trace<BR>
 *	Funct<BR>
 *	Param<BR>
 *	Return<BR>
 *	Always<BR>
 */
	vector<string>	debugLevels;
//@}

/**
 *	@name Device properties
 *	Device property member data.
 */
//@{
//@}

/**@name Constructors
 * Miscellaneous constructors */
//@{
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	LimaDetector(Tango::DeviceClass *cl,string &s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	LimaDetector(Tango::DeviceClass *cl,const char *s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device name
 *	@param d	Device description.
 */
	LimaDetector(Tango::DeviceClass *cl,const char *s,const char *d);
//@}

/**@name Destructor
 * Only one destructor is defined for this class */
//@{
/**
 * The object destructor.
 */	
	~LimaDetector() {delete_device();};
/**
 *	will be called at device destruction or at init command.
 */
	void delete_device();
//@}

	
/**@name Miscellaneous methods */
//@{
/**
 *	Initialize the device
 */
	virtual void init_device();
/**
 *	Always executed method before execution command method.
 */
	virtual void always_executed_hook();

//@}

/**
 * @name LimaDetector methods prototypes
 */

//@{
/**
 *	Hardware acquisition for attributes.
 */
	virtual void read_attr_hardware(vector<long> &attr_list);
/**
 *	Extract real attribute values for detectorDescription acquisition result.
 */
	virtual void read_detectorDescription(Tango::Attribute &attr);
/**
 *	Extract real attribute values for detectorType acquisition result.
 */
	virtual void read_detectorType(Tango::Attribute &attr);
/**
 *	Extract real attribute values for detectorModel acquisition result.
 */
	virtual void read_detectorModel(Tango::Attribute &attr);
/**
 *	Extract real attribute values for sensorWidth acquisition result.
 */
	virtual void read_sensorWidth(Tango::Attribute &attr);
/**
 *	Extract real attribute values for sensorHeight acquisition result.
 */
	virtual void read_sensorHeight(Tango::Attribute &attr);
/**
 *	Extract real attribute values for depth acquisition result.
 */
	virtual void read_depth(Tango::Attribute &attr);
/**
 *	Extract real attribute values for triggerMode acquisition result.
 */
	virtual void read_triggerMode(Tango::Attribute &attr);
/**
 *	Write triggerMode attribute values to hardware.
 */
	virtual void write_triggerMode(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for acquisitionMode acquisition result.
 */
	virtual void read_acquisitionMode(Tango::Attribute &attr);
/**
 *	Write acquisitionMode attribute values to hardware.
 */
	virtual void write_acquisitionMode(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for exposureTime acquisition result.
 */
	virtual void read_exposureTime(Tango::Attribute &attr);
/**
 *	Write exposureTime attribute values to hardware.
 */
	virtual void write_exposureTime(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for exposureAccTime acquisition result.
 */
	virtual void read_exposureAccTime(Tango::Attribute &attr);
/**
 *	Write exposureAccTime attribute values to hardware.
 */
	virtual void write_exposureAccTime(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for nbFrames acquisition result.
 */
	virtual void read_nbFrames(Tango::Attribute &attr);
/**
 *	Write nbFrames attribute values to hardware.
 */
	virtual void write_nbFrames(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for currentFrame acquisition result.
 */
	virtual void read_currentFrame(Tango::Attribute &attr);
/**
 *	Extract real attribute values for fileGeneration acquisition result.
 */
	virtual void read_fileGeneration(Tango::Attribute &attr);
/**
 *	Write fileGeneration attribute values to hardware.
 */
	virtual void write_fileGeneration(Tango::WAttribute &attr);
/**
 *	Read/Write allowed for detectorDescription attribute.
 */
	virtual bool is_detectorDescription_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for detectorType attribute.
 */
	virtual bool is_detectorType_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for detectorModel attribute.
 */
	virtual bool is_detectorModel_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for sensorWidth attribute.
 */
	virtual bool is_sensorWidth_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for sensorHeight attribute.
 */
	virtual bool is_sensorHeight_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for depth attribute.
 */
	virtual bool is_depth_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for triggerMode attribute.
 */
	virtual bool is_triggerMode_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for acquisitionMode attribute.
 */
	virtual bool is_acquisitionMode_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for exposureTime attribute.
 */
	virtual bool is_exposureTime_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for exposureAccTime attribute.
 */
	virtual bool is_exposureAccTime_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for nbFrames attribute.
 */
	virtual bool is_nbFrames_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for currentFrame attribute.
 */
	virtual bool is_currentFrame_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for fileGeneration attribute.
 */
	virtual bool is_fileGeneration_allowed(Tango::AttReqType type);
/**
 *	Execution allowed for DeleteRemainingFiles command.
 */
	virtual bool is_DeleteRemainingFiles_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for Snap command.
 */
	virtual bool is_Snap_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for Start command.
 */
	virtual bool is_Start_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for Stop command.
 */
	virtual bool is_Stop_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for SetROI command.
 */
	virtual bool is_SetROI_allowed(const CORBA::Any &any);
/**
 * This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *	@return	State Code
 *	@exception DevFailed
 */
	virtual Tango::DevState	dev_state();
/**
 * Remove all files in the directory defined by the property FileTargetPath
 *	@exception DevFailed
 */
	void	delete_remaining_files();
/**
 * Starts the acquisition of a number of frames equal to  'nbFrames' attribute value.
 *	@exception DevFailed
 */
	void	snap();
/**
 * Starts a "video/live" acquisition of an infinite number of frames.<br>
 *	It is not allowed to generate files in this mode.
 *	@exception DevFailed
 */
	void	start();
/**
 * Stop current acquisition.
 *	@exception DevFailed
 */
	void	stop();
/**
 * Define a Region of Interest . (OriginX, OriginY, Width, Height)
 *	@param	argin	[origin_x, origin_y, width, height]
 *	@exception DevFailed
 */
	void	set_roi(const Tango::DevVarLongArray *);

/**
 *	Read the device properties from database
 */
	 void get_device_property();
//@}

	//	Here is the end of the automatic code generation part
	//-------------------------------------------------------------	


	void 			read_image_callback(yat4tango::DynamicAttributeReadCallbackData& cbd);	
protected :	
	//	Add your own data members here
	//-----------------------------------------
	//- Store the values into the property
	//- Properties stuff	
	int				FindIndexFromPropertyName(Tango::DbData& dev_prop, string property_name);
	template <class T>
	void			create_property_if_empty(Tango::DbData& dev_prop,T value, string property_name);	
	template <class T>
	void			store_value_as_property(T value, string property_name);	
	bool 			create_acquisition_task(void);	
		
	//print parameters acquisition
	void 			print_acq_conf();	
	
	//state & status stuff
	bool 								m_is_device_initialized ;
	stringstream						m_status_message;

	//LIMA objects
	HwInterface* 						m_hw;
	CtControl*							m_ct;
	ImageStatusCallback*				m_img_status_cb;
	CtSaving::Parameters 				m_saving_par;
	string 								m_trigger_mode;
	string 								m_acquisition_mode;
	
	//-Yat task to manage device Start/Snap/Stop commands
	TaskPtr								m_acquisition_task;
	AcquisitionTask::AcqConfig 			m_acq_conf;
	
	//- Dyn Attr
	DynamicAttributeManager				m_dam;

};

}	// namespace_ns

#endif	// _LimaDetector_H
