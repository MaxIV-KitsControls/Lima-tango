static const char *RcsId = "$Id:  $";
//+=============================================================================
//
// file :         MarCCD.cpp
//
// description :  C++ source for the MarCCD and its commands. 
//                The class is derived from Device. It represents the
//                CORBA servant object which will be accessed from the
//                network. All commands which can be executed on the
//                MarCCD are implemented in this file.
//
// project :      TANGO Device Server
//
// $Author:  $
//
// $Revision:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source:  $
// $Log:  $
//
// copyleft :    Synchrotron SOLEIL 
//               L'Orme des merisiers - Saint Aubin
//               BP48 - 91192 Gif sur Yvette
//               FRANCE
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================



//===================================================================
//
//	The following table gives the correspondence
//	between commands and method name.
//
//  Command name    |  Method name
//	----------------------------------------
//  State           |  dev_state()
//  Status          |  dev_status()
//  TakeBackground  |  take_background()
//
//===================================================================



#include <MarCCD.h>
#include <MarCCDClass.h>
#include <tango.h>
#include <PogoHelper.h>

namespace MarCCD_ns
{

//+----------------------------------------------------------------------------
//
// method : 		MarCCD::MarCCD(string &s)
// 
// description : 	constructor for simulated MarCCD
//
// in : - cl : Pointer to the DeviceClass object
//      - s : Device name 
//
//-----------------------------------------------------------------------------
MarCCD::MarCCD(Tango::DeviceClass *cl,string &s)
:Tango::Device_4Impl(cl,s.c_str())
{
	init_device();
}

MarCCD::MarCCD(Tango::DeviceClass *cl,const char *s)
:Tango::Device_4Impl(cl,s)
{
	init_device();
}

MarCCD::MarCCD(Tango::DeviceClass *cl,const char *s,const char *d)
:Tango::Device_4Impl(cl,s,d)
{
	init_device();
}
//+----------------------------------------------------------------------------
//
// method : 		MarCCD::delete_device()
// 
// description : 	will be called at device destruction or at init command.
//
//-----------------------------------------------------------------------------
void MarCCD::delete_device()
{
	//	Delete device allocated objects
	DELETE_SCALAR_ATTRIBUTE(attr_binnig_read);

    //!!!! ONLY LimaDetector device can do this !!!!
    //if(m_ct!=0)
    //{
    //    ControlFactory::instance().reset("PilatusPixelDetector");
    //    m_ct = 0;
    //}
}

//+----------------------------------------------------------------------------
//
// method : 		MarCCD::init_device()
// 
// description : 	will be called at device initialization.
//
//-----------------------------------------------------------------------------
void MarCCD::init_device()
{
	INFO_STREAM << "MarCCD::MarCCD() create device " << device_name << endl;

	// Initialise variables to default values
	//--------------------------------------------
	get_device_property();

	CREATE_SCALAR_ATTRIBUTE(attr_binnig_read);

	m_is_device_initialized = false;
	m_status_message.str("");

	try
	{
		//- get the main object used to pilot the lima framework
		//in fact LimaDetector is create the singleton control objet
		//so this call, will only return existing object, no need to give it the ip !!
		m_ct = ControlFactory::instance().get_control("MarCCD");

		//- get interface to specific camera
		m_hw = dynamic_cast<Marccd::Interface*>(m_ct->hwInterface());
		if( m_hw==0 )
		{
			INFO_STREAM<<"Initialization Failed : Unable to get the interface of camera plugin !" << std::endl;
			m_status_message <<"Initialization Failed : Unable to get the interface of camera plugin !" << std::endl;
			m_is_device_initialized = false;
			set_state(Tango::INIT);
			return;
		}

	}
	catch(Exception& e)
	{
		INFO_STREAM<<"Initialization Failed : " << e.getErrMsg() << std::endl;
		m_status_message <<"Initialization Failed : " << e.getErrMsg( ) << std::endl;
		m_is_device_initialized = false;
		set_state(Tango::INIT);
		return;
	}
	catch(...)
	{
		INFO_STREAM<<"Initialization Failed : UNKNOWN"<<endl;
		m_status_message <<"Initialization Failed : UNKNOWN"<< endl;
		set_state(Tango::INIT);
		m_is_device_initialized = false;
		return;
	}
	m_is_device_initialized = true;
	set_state(Tango::STANDBY);
	this->dev_state();
}


//+----------------------------------------------------------------------------
//
// method : 		MarCCD::get_device_property()
// 
// description : 	Read the device properties from database.
//
//-----------------------------------------------------------------------------
void MarCCD::get_device_property()
{
	//	Initialize your default values here (if not done with  POGO).
	//------------------------------------------------------------------

	//	Read device properties from database.(Automatic code generation)
	//------------------------------------------------------------------
	Tango::DbData	dev_prop;
	dev_prop.push_back(Tango::DbDatum("DetectorIP"));
	dev_prop.push_back(Tango::DbDatum("DetectorPort"));
	dev_prop.push_back(Tango::DbDatum("DetectorTargetPath"));
	dev_prop.push_back(Tango::DbDatum("DetectorImageName"));
	dev_prop.push_back(Tango::DbDatum("DirectoryWatcherPath"));

	//	Call database and extract values
	//--------------------------------------------
	if (Tango::Util::instance()->_UseDb==true)
		get_db_device()->get_property(dev_prop);
	Tango::DbDatum	def_prop, cl_prop;
	MarCCDClass	*ds_class =
		(static_cast<MarCCDClass *>(get_device_class()));
	int	i = -1;

	//	Try to initialize DetectorIP from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  detectorIP;
	else {
		//	Try to initialize DetectorIP from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  detectorIP;
	}
	//	And try to extract DetectorIP value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  detectorIP;

	//	Try to initialize DetectorPort from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  detectorPort;
	else {
		//	Try to initialize DetectorPort from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  detectorPort;
	}
	//	And try to extract DetectorPort value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  detectorPort;

	//	Try to initialize DetectorTargetPath from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  detectorTargetPath;
	else {
		//	Try to initialize DetectorTargetPath from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  detectorTargetPath;
	}
	//	And try to extract DetectorTargetPath value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  detectorTargetPath;

	//	Try to initialize DetectorImageName from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  detectorImageName;
	else {
		//	Try to initialize DetectorImageName from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  detectorImageName;
	}
	//	And try to extract DetectorImageName value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  detectorImageName;

	//	Try to initialize DirectoryWatcherPath from class property
	cl_prop = ds_class->get_class_property(dev_prop[++i].name);
	if (cl_prop.is_empty()==false)	cl_prop  >>  directoryWatcherPath;
	else {
		//	Try to initialize DirectoryWatcherPath from default device value
		def_prop = ds_class->get_default_device_property(dev_prop[i].name);
		if (def_prop.is_empty()==false)	def_prop  >>  directoryWatcherPath;
	}
	//	And try to extract DirectoryWatcherPath value from database
	if (dev_prop[i].is_empty()==false)	dev_prop[i]  >>  directoryWatcherPath;



	//	End of Automatic code generation
	//------------------------------------------------------------------
	create_property_if_empty(dev_prop,"127.0.0.1","DetectorIP");
  create_property_if_empty(dev_prop,"-1","DetectorPort");
	create_property_if_empty(dev_prop,"/no/path/defined/","DetectorTargetPath");
	create_property_if_empty(dev_prop,"imgRAW.00xx","DetectorImageName");
  create_property_if_empty(dev_prop,"/no/path/defined/","DirectoryWatcherPath");
}
//+----------------------------------------------------------------------------
//
// method : 		MarCCD::always_executed_hook()
// 
// description : 	method always executed before any command is executed
//
//-----------------------------------------------------------------------------
void MarCCD::always_executed_hook()
{

}
//+----------------------------------------------------------------------------
//
// method : 		MarCCD::read_attr_hardware
// 
// description : 	Hardware acquisition for attributes.
//
//-----------------------------------------------------------------------------
void MarCCD::read_attr_hardware(vector<long> &attr_list)
{
	DEBUG_STREAM << "MarCCD::read_attr_hardware(vector<long> &attr_list) entering... "<< endl;
	//	Add your own code here
}

//+----------------------------------------------------------------------------
//
// method : 		MarCCD::read_binnig
// 
// description : 	Extract real attribute values for binnig acquisition result.
//
//-----------------------------------------------------------------------------
void MarCCD::read_binnig(Tango::Attribute &attr)
{
	DEBUG_STREAM << "MarCCD::read_binnig(Tango::Attribute &attr) entering... "<< endl;
	if(m_ct!=0)
	{
		try
		{

			Bin marBin;
			m_ct->image()->getBin(marBin);
			switch(marBin.getX())
			{
			case 1 : *attr_binnig_read = 0;
				break;
			case 2 : *attr_binnig_read = 1;
				break;
			case 3 : *attr_binnig_read = 2;
				break;
			case 4 : *attr_binnig_read = 3;
				break;
			case 8 : *attr_binnig_read = 4;
				break;
			}
			attr.set_value(attr_binnig_read);
		}
		catch(Tango::DevFailed& df)
		{
			ERROR_STREAM << df << endl;
			//- rethrow exception
			Tango::Except::re_throw_exception(df,
				static_cast<const char*> ("TANGO_DEVICE_ERROR"),
				static_cast<const char*> (string(df.errors[0].desc).c_str()),
				static_cast<const char*> ("MarCCD::read_binnig"));
		}
		catch(Exception& e)
		{
			ERROR_STREAM << e.getErrMsg() << endl;
			//- throw exception
			Tango::Except::throw_exception(
				static_cast<const char*> ("TANGO_DEVICE_ERROR"),
				static_cast<const char*> (e.getErrMsg().c_str()),
				static_cast<const char*> ("MarCCD::read_binnig"));
		}
		catch(...)
		{
			ERROR_STREAM << "MarCCD::read_binnig -> caught [...]" << endl;
			//- throw exception
			Tango::Except::throw_exception(
				static_cast<const char*> ("UNKNOWN_ERROR"),
				static_cast<const char*> ("MarCCD::read_binnig -> caught [...]"),
				static_cast<const char*> ("MarCCD::read_binnig"));
		}
	}
}

//+----------------------------------------------------------------------------
//
// method : 		MarCCD::write_binnig
// 
// description : 	Write binnig attribute values to hardware.
//
//-----------------------------------------------------------------------------
void MarCCD::write_binnig(Tango::WAttribute &attr)
{
	DEBUG_STREAM << "MarCCD::write_binnig(Tango::WAttribute &attr) entering... "<< endl;
	if(m_ct!=0)
	{
		try
		{
			Bin newBin;
			attr.get_write_value(attr_binnig_write);
			switch(attr_binnig_write)
			{
			case 0 : newBin = Bin(1,1); std::cout << "MarCCD::write_binnig -> 1" << std::endl;
				break;
			case 1 : newBin = Bin(2,2);std::cout << "MarCCD::write_binnig -> 2" << std::endl;
				break;
			case 2 : newBin = Bin(3,3);std::cout << "MarCCD::write_binnig -> 3" << std::endl;
				break;
			case 3 : newBin = Bin(4,4);std::cout << "MarCCD::write_binnig -> 4" << std::endl;
				break;
			case 4 : newBin = Bin(8,8);std::cout << "MarCCD::write_binnig -> 8" << std::endl;
				break;
			}
			m_ct->image()->setBin(newBin);
		}
		catch(Tango::DevFailed& df)
		{
			ERROR_STREAM << df << endl;
			//- rethrow exception
			Tango::Except::re_throw_exception(df,
				static_cast<const char*> ("TANGO_DEVICE_ERROR"),
				static_cast<const char*> (string(df.errors[0].desc).c_str()),
				static_cast<const char*> ("MarCCD::write_binnig"));
		}
		catch(Exception& e)
		{
			ERROR_STREAM << e.getErrMsg() << endl;
			//- throw exception
			Tango::Except::throw_exception(
				static_cast<const char*> ("TANGO_DEVICE_ERROR"),
				static_cast<const char*> (e.getErrMsg().c_str()),
				static_cast<const char*> ("MarCCD::write_binnig"));
		}
		catch(...)
		{
			ERROR_STREAM << "MarCCD::write_binnig -> caught [...]" << endl;
			//- throw exception
			Tango::Except::throw_exception(
				static_cast<const char*> ("UNKNOWN_ERROR"),
				static_cast<const char*> ("MarCCD::write_binnig -> caught [...]"),
				static_cast<const char*> ("MarCCD::write_binnig"));
		}
	}
}



//+------------------------------------------------------------------
/**
 *	method:	MarCCD::dev_state
 *
 *	description:	method to execute "State"
 *	This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *
 * @return	State Code
 *
 */
//+------------------------------------------------------------------
Tango::DevState MarCCD::dev_state()
{
	Tango::DevState	argout = DeviceImpl::dev_state();
	DEBUG_STREAM << "MarCCD::dev_state(): entering... !" << endl;
	//	Add your own code to control device here
	stringstream    DeviceStatus;
	DeviceStatus 	<< "";
	Tango::DevState DeviceState	= Tango::STANDBY;
	if( !m_is_device_initialized )
	{
		DeviceState			= Tango::INIT;
		DeviceStatus		<< m_status_message.str();
	}
	else if ( !m_ct )
	{
		DeviceState			= Tango::INIT;
		DeviceStatus		<<"Initialization Failed : Unable to get the lima control object !\n\n";
	}
	else
	{
		 CtControl::Status status;
        m_ct->getStatus(status);
        if (status.AcquisitionStatus == lima::AcqReady)
        {
                HwInterface::StatusType state;
                m_hw->getStatus(state);

                if(state.acq == AcqRunning && state.det == DetExposure)
                {
                    DeviceState=Tango::RUNNING;
                    DeviceStatus<<"Acquisition is Running ...\n"<<endl;
                }
                else if(state.acq == AcqFault && state.det == DetFault)
                {
                    DeviceState=Tango::FAULT;//FAULT
                    DeviceStatus<<"Acquisition is in Fault\n"<<endl;
                }
                else
                {
                    DeviceState=Tango::STANDBY;
                    DeviceStatus<<"Waiting for Request ...\n"<<endl;
                }
        }
        else if(status.AcquisitionStatus == lima::AcqRunning)
        {
            DeviceState=Tango::RUNNING;
            DeviceStatus<<"Acquisition is Running ...\n"<<endl;
        }
        else
        {
            DeviceState=Tango::FAULT;//FAULT
            DeviceStatus<<"Acquisition is in Fault\n"<<endl;
        }
	}

	set_state(DeviceState);
	set_status(DeviceStatus.str());

	argout = DeviceState;
	return argout;
}

/*-------------------------------------------------------------------------
//       MarCCD::store_value_as_property
/-------------------------------------------------------------------------*/
template <class T>
void MarCCD::store_value_as_property (T value, string property_name)
{
    Tango::DbDatum current_value(property_name);
    current_value << value;
    Tango::DbData db_data;
    db_data.push_back(current_value);
    try
    {
        get_db_device()->put_property(db_data);
    }
    catch(Tango::DevFailed &df)
    {
        string message= "Error in storing " + property_name + " in Configuration DataBase ";
        LOG_ERROR((message));
        ERROR_STREAM<<df<<endl;
        //- rethrow exception
        Tango::Except::re_throw_exception(df,
                    static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                    static_cast<const char*> (string(df.errors[0].desc).c_str()),
                    static_cast<const char*> ("LimaDetector::store_value_as_property"));
    }

}


/*-------------------------------------------------------------------------
//       MarCCD::create_property_if_empty
/-------------------------------------------------------------------------*/
template <class T>
void MarCCD::create_property_if_empty(Tango::DbData& dev_prop,T value,string property_name)
{
    int iPropertyIndex = FindIndexFromPropertyName(dev_prop,property_name);
    if (iPropertyIndex == -1) return;
    if (dev_prop[iPropertyIndex].is_empty())
    {
        Tango::DbDatum current_value(dev_prop[iPropertyIndex].name);
        current_value << value;
        Tango::DbData db_data;
        db_data.push_back(current_value);

        try
        {
            get_db_device()->put_property(db_data);
        }
        catch(Tango::DevFailed &df)
        {
            string message= "Error in storing " + property_name + " in Configuration DataBase ";
            LOG_ERROR((message));
            ERROR_STREAM<<df<<endl;
            //- rethrow exception
            Tango::Except::re_throw_exception(df,
                        static_cast<const char*> ("TANGO_DEVICE_ERROR"),
                        static_cast<const char*> (string(df.errors[0].desc).c_str()),
                        static_cast<const char*> ("LimaDetector::create_property_if_empty"));
        }
    }
}

/*-------------------------------------------------------------------------
//       MarCCD::FindIndexFromPropertyName
/-------------------------------------------------------------------------*/
int MarCCD::FindIndexFromPropertyName(Tango::DbData& dev_prop, string property_name)
{
    size_t iNbProperties = dev_prop.size();
    unsigned int i;
    for (i=0;i<iNbProperties;i++)
    {
        string sPropertyName(dev_prop[i].name);
        if (sPropertyName == property_name) return i;
    }
    if (i == iNbProperties) return -1;
    return i;
}






//+------------------------------------------------------------------
/**
 *	method:	MarCCD::take_background
 *
 *	description:	method to execute "TakeBackground"
 *	Command to force the MarCCD detector to get a background frame.
 *
 *
 */
//+------------------------------------------------------------------
void MarCCD::take_background()
{
	DEBUG_STREAM << "MarCCD::take_background(): entering... !" << endl;

	//	Add your own code to control device here
	if(m_ct!=0)
	{
		try
		{
			if(m_hw!=0)
				m_hw->takeBackgroundFrame();
		}
		catch(Tango::DevFailed& df)
		{
			ERROR_STREAM << df << endl;
			//- rethrow exception
			Tango::Except::re_throw_exception(df,
				static_cast<const char*> ("TANGO_DEVICE_ERROR"),
				static_cast<const char*> (string(df.errors[0].desc).c_str()),
				static_cast<const char*> ("MarCCD::take_background"));
		}
		catch(Exception& e)
		{
			ERROR_STREAM << e.getErrMsg() << endl;
			//- throw exception
			Tango::Except::throw_exception(
				static_cast<const char*> ("TANGO_DEVICE_ERROR"),
				static_cast<const char*> (e.getErrMsg().c_str()),
				static_cast<const char*> ("MarCCD::take_background"));
		}
		catch(...)
		{
			ERROR_STREAM << "MarCCD::read_binnig -> caught [...]" << endl;
			//- throw exception
			Tango::Except::throw_exception(
				static_cast<const char*> ("UNKNOWN_ERROR"),
				static_cast<const char*> ("MarCCD::take_background -> caught [...]"),
				static_cast<const char*> ("MarCCD::take_background"));
		}
	}

}



}	//	namespace
