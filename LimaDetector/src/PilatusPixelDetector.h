//=============================================================================
//
// file :        PilatusPixelDetector.h
//
// description : Include for the PilatusPixelDetector class.
//
// project :	
//
// $Author:  $
//
// $Revision:  $
// $Date:  $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source:  $
// $Log:  $
//
// copyleft :    Synchrotron SOLEIL 
//               L'Orme des merisiers - Saint Aubin
//		 BP48 - 91192 Gif sur Yvette
//               FRANCE
//
//=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================
#ifndef _PILATUSPIXELDETECTOR_H
#define _PILATUSPIXELDETECTOR_H

#include <tango.h>
//using namespace Tango;

/**
 * @author	$Author:  $
 * @version	$Revision:  $
 */

 //	Add your own constant definitions here.
 //-----------------------------------------------
#include "HwInterface.h"
#include "CtControl.h"
#include "CtAcquisition.h"
#include <PilatusCommunication.h>
#include <PilatusInterface.h>
#include "Factory.h"


#define MAX_ATTRIBUTE_STRING_LENGTH 	256

using namespace lima;
using namespace std;

namespace PilatusPixelDetector_ns
{

/**
 * Class Description:
 * 
 */

/*
 *	Device States Description:
*  Tango::INIT :
*  Tango::STANDBY :
*  Tango::FAULT :
*  Tango::RUNNING :
 */


class PilatusPixelDetector: public Tango::Device_4Impl
{
public :
	//	Add your own data members here
	//-----------------------------------------


	//	Here is the Start of the automatic code generation part
	//-------------------------------------------------------------	
/**
 *	@name attributes
 *	Attribute member data.
 */
//@{
		Tango::DevLong	*attr_threshold_read;
		Tango::DevLong	attr_threshold_write;
		Tango::DevString	*attr_gain_read;
		Tango::DevString	attr_gain_write;
//@}

/**
 * @name Device properties
 * Device properties member data.
 */
//@{
//@}

/**
 *	@name Device properties
 *	Device property member data.
 */
//@{
//@}

/**@name Constructors
 * Miscellaneous constructors */
//@{
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	PilatusPixelDetector(Tango::DeviceClass *cl,string &s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device Name
 */
	PilatusPixelDetector(Tango::DeviceClass *cl,const char *s);
/**
 * Constructs a newly allocated Command object.
 *
 *	@param cl	Class.
 *	@param s 	Device name
 *	@param d	Device description.
 */
	PilatusPixelDetector(Tango::DeviceClass *cl,const char *s,const char *d);
//@}

/**@name Destructor
 * Only one destructor is defined for this class */
//@{
/**
 * The object destructor.
 */	
	~PilatusPixelDetector() {delete_device();};
/**
 *	will be called at device destruction or at init command.
 */
	void delete_device();
//@}

	
/**@name Miscellaneous methods */
//@{
/**
 *	Initialize the device
 */
	virtual void init_device();
/**
 *	Always executed method before execution command method.
 */
	virtual void always_executed_hook();

//@}

/**
 * @name PilatusPixelDetector methods prototypes
 */

//@{
/**
 *	Hardware acquisition for attributes.
 */
	virtual void read_attr_hardware(vector<long> &attr_list);
/**
 *	Extract real attribute values for threshold acquisition result.
 */
	virtual void read_threshold(Tango::Attribute &attr);
/**
 *	Write threshold attribute values to hardware.
 */
	virtual void write_threshold(Tango::WAttribute &attr);
/**
 *	Extract real attribute values for gain acquisition result.
 */
	virtual void read_gain(Tango::Attribute &attr);
/**
 *	Write gain attribute values to hardware.
 */
	virtual void write_gain(Tango::WAttribute &attr);
/**
 *	Read/Write allowed for threshold attribute.
 */
	virtual bool is_threshold_allowed(Tango::AttReqType type);
/**
 *	Read/Write allowed for gain attribute.
 */
	virtual bool is_gain_allowed(Tango::AttReqType type);
/**
 *	Execution allowed for SetThresholdAndGain command.
 */
	virtual bool is_SetThresholdAndGain_allowed(const CORBA::Any &any);
/**
 *	Execution allowed for SetMxSettings command.
 */
	virtual bool is_SetMxSettings_allowed(const CORBA::Any &any);
/**
 * This command gets the device state (stored in its <i>device_state</i> data member) and returns it to the caller.
 *	@return	State Code
 *	@exception DevFailed
 */
	virtual Tango::DevState	dev_state();
/**
 * 
 *	@param	argin	
 *	@exception DevFailed
 */
	void	set_threshold_and_gain(const Tango::DevVarLongStringArray *);
/**
 * 
 *	@param	argin	
 *	@exception DevFailed
 */
	void	set_mx_settings(Tango::DevString);

/**
 *	Read the device properties from database
 */
	 void get_device_property();
//@}

	//	Here is the end of the automatic code generation part
	//-------------------------------------------------------------	



protected :	
	//	Add your own data members here
	//-----------------------------------------
	
	bool 				    m_is_device_initialized ;
	stringstream		    m_status_message;
	string 				    m_gain;    
	
	//LIMA objects
	PilatusCpp::Interface*	m_hw;
	CtControl*				m_ct;	
};

}	// namespace_ns

#endif	// _PILATUSPIXELDETECTOR_H
