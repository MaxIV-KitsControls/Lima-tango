static const char *RcsId = "$Id $";
//+=============================================================================
//
// file :        main.cpp
//
// description : C++ source for a TANGO device server main.
//               The main rule is to initialise (and create) the Tango
//               system and to create the DServerClass singleton.
//               The main should be the same for every Tango device server.
//
// project :     TANGO Device Server
//
// $Author:  $
//
// $Revision:  $ $
// $Date:  $
//
// SVN only:
// $HeadURL: $
//
// CVS only:
// $Source:  $
// $Log:  $
//
// copyleft :    European Synchrotron Radiation Facility
//               BP 220, Grenoble 38043
//               FRANCE
//
//-=============================================================================
//
//  		This file is generated by POGO
//	(Program Obviously used to Generate tango Object)
//
//         (c) - Software Engineering Group - ESRF
//=============================================================================

#include <tango.h>
#ifdef XPAD_ENABLED	
	//- Xpix
	#include <xpci_interface.h>
	#include <xpci_interface_expert.h>
	#include <xpci_time.h>
#endif
int main(int argc,char *argv[])
{

	
	Tango::Util *tg;
#ifdef XPAD_ENABLED		
	//- INIT of the PCI Express board
	if(xpci_init(0,XPAD_32) == 0)
		cout << "PCIe board succesfully initialized" << endl;
#endif
	try
	{
		// Initialise the device server
		//----------------------------------------
		tg = Tango::Util::init(argc,argv);

		// Create the device server singleton 
		//	which will create everything
		//----------------------------------------
		tg->server_init(false);

		// Run the endless loop
		//----------------------------------------
		cout << "Ready to accept request" << endl;
		tg->server_run();
	}
	catch (bad_alloc)
	{
		cout << "Can't allocate memory to store device object !!!" << endl;
		cout << "Exiting" << endl;
	}
	catch (CORBA::Exception &e)
	{
		Tango::Except::print_exception(e);
		
		cout << "Received a CORBA_Exception" << endl;
		cout << "Exiting" << endl;
	}
	tg->server_cleanup();

#ifdef XPAD_ENABLED	
	// Close XPCI Lib
	xpci_close(0);
	cout << "XPCI Lib closed" << endl;
#endif
	return(0);
}
